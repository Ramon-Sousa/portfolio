"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/notion-to-md";
exports.ids = ["vendor-chunks/notion-to-md"];
exports.modules = {

/***/ "(rsc)/./node_modules/notion-to-md/build/index.js":
/*!**************************************************!*\
  !*** ./node_modules/notion-to-md/build/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./notion-to-md */ \"(rsc)/./node_modules/notion-to-md/build/notion-to-md.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQywrRUFBZ0I7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL2luZGV4LmpzPzA1NWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ub3Rpb24tdG8tbWRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/notion-to-md.js":
/*!*********************************************************!*\
  !*** ./node_modules/notion-to-md/build/notion-to-md.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NotionToMarkdown = void 0;\nconst md = __importStar(__webpack_require__(/*! ./utils/md */ \"(rsc)/./node_modules/notion-to-md/build/utils/md.js\"));\nconst notion_1 = __webpack_require__(/*! ./utils/notion */ \"(rsc)/./node_modules/notion-to-md/build/utils/notion.js\");\n/**\n * Converts a Notion page to Markdown.\n */\nclass NotionToMarkdown {\n    constructor(options) {\n        this.notionClient = options.notionClient;\n        const defaultConfig = {\n            separateChildPage: false,\n            convertImagesToBase64: false,\n            parseChildPages: true,\n        };\n        this.config = { ...defaultConfig, ...options.config };\n        this.customTransformers = {};\n    }\n    setCustomTransformer(type, transformer) {\n        this.customTransformers[type] = transformer;\n        return this;\n    }\n    /**\n     * Converts Markdown Blocks to string\n     * @param {MdBlock[]} mdBlocks - Array of markdown blocks\n     * @param {number} nestingLevel - Defines max depth of nesting\n     * @returns {MdStringObject} - Returns markdown string with child pages separated\n     */\n    toMarkdownString(mdBlocks = [], pageIdentifier = \"parent\", nestingLevel = 0) {\n        let mdOutput = {};\n        mdBlocks.forEach((mdBlocks) => {\n            // NOTE: toggle in the child blocks logic\n            // adding a toggle check prevents duplicate\n            // rendering of toggle title\n            // process parent blocks\n            if (mdBlocks.parent &&\n                mdBlocks.type !== \"toggle\" &&\n                mdBlocks.type !== \"child_page\") {\n                if (mdBlocks.type !== \"to_do\" &&\n                    mdBlocks.type !== \"bulleted_list_item\" &&\n                    mdBlocks.type !== \"numbered_list_item\") {\n                    // initialize if key doesn't exist\n                    mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n                    // add extra line breaks non list blocks\n                    mdOutput[pageIdentifier] += `\\n${md.addTabSpace(mdBlocks.parent, nestingLevel)}\\n\\n`;\n                }\n                else {\n                    // initialize if key doesn't exist\n                    mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n                    mdOutput[pageIdentifier] += `${md.addTabSpace(mdBlocks.parent, nestingLevel)}\\n`;\n                }\n            }\n            // process child blocks\n            if (mdBlocks.children && mdBlocks.children.length > 0) {\n                if (mdBlocks.type === \"synced_block\" ||\n                    mdBlocks.type === \"column_list\" ||\n                    mdBlocks.type === \"column\") {\n                    let mdstr = this.toMarkdownString(mdBlocks.children, pageIdentifier);\n                    mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n                    Object.keys(mdstr).forEach((key) => {\n                        if (mdOutput[key]) {\n                            mdOutput[key] += mdstr[key];\n                        }\n                        else {\n                            mdOutput[key] = mdstr[key];\n                        }\n                    });\n                }\n                else if (mdBlocks.type === \"child_page\") {\n                    const childPageTitle = mdBlocks.parent;\n                    let mdstr = this.toMarkdownString(mdBlocks.children, childPageTitle);\n                    if (this.config.separateChildPage) {\n                        mdOutput = { ...mdOutput, ...mdstr };\n                    }\n                    else {\n                        mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n                        if (mdstr[childPageTitle]) {\n                            // child page heading followed by child page content\n                            mdOutput[pageIdentifier] += `\\n${childPageTitle}\\n${mdstr[childPageTitle]}`;\n                        }\n                    }\n                }\n                else if (mdBlocks.type === \"toggle\") {\n                    // convert children md object to md string\n                    const toggle_children_md_string = this.toMarkdownString(mdBlocks.children);\n                    mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n                    mdOutput[pageIdentifier] += md.toggle(mdBlocks.parent, toggle_children_md_string[\"parent\"]);\n                }\n                else {\n                    let mdstr = this.toMarkdownString(mdBlocks.children, pageIdentifier, nestingLevel + 1);\n                    mdOutput[pageIdentifier] = mdOutput[pageIdentifier] || \"\";\n                    if (pageIdentifier !== \"parent\" && mdstr[\"parent\"]) {\n                        mdOutput[pageIdentifier] += mdstr[\"parent\"];\n                    }\n                    else if (mdstr[pageIdentifier]) {\n                        mdOutput[pageIdentifier] += mdstr[pageIdentifier];\n                    }\n                }\n            }\n        });\n        return mdOutput;\n    }\n    /**\n     * Retrieves Notion Blocks based on ID and converts them to Markdown Blocks\n     * @param {string} id - notion page id (not database id)\n     * @param {number} totalPage - Retrieve block children request number, page_size Maximum = totalPage * 100 (Default=null)\n     * @returns {Promise<MdBlock[]>} - List of markdown blocks\n     */\n    async pageToMarkdown(id, totalPage = null) {\n        if (!this.notionClient) {\n            throw new Error(\"notion client is not provided, for more details check out https://github.com/souvikinator/notion-to-md\");\n        }\n        const blocks = await (0, notion_1.getBlockChildren)(this.notionClient, id, totalPage);\n        const parsedData = await this.blocksToMarkdown(blocks);\n        return parsedData;\n    }\n    /**\n     * Converts list of Notion Blocks to Markdown Blocks\n     * @param {ListBlockChildrenResponseResults | undefined} blocks - List of notion blocks\n     * @param {number} totalPage - Retrieve block children request number, page_size Maximum = totalPage * 100\n     * @param {MdBlock[]} mdBlocks - Defines max depth of nesting\n     * @returns {Promise<MdBlock[]>} - Array of markdown blocks with their children\n     */\n    async blocksToMarkdown(blocks, totalPage = null, mdBlocks = []) {\n        var _a, _b;\n        if (!this.notionClient) {\n            throw new Error(\"notion client is not provided, for more details check out https://github.com/souvikinator/notion-to-md\");\n        }\n        if (!blocks)\n            return mdBlocks;\n        for (let i = 0; i < blocks.length; i++) {\n            let block = blocks[i];\n            // @ts-ignore\n            if (block.type === \"child_page\" && !this.config.parseChildPages) {\n                continue;\n            }\n            if (\"has_children\" in block && block.has_children) {\n                const block_id = block.type == \"synced_block\" &&\n                    ((_b = (_a = block.synced_block) === null || _a === void 0 ? void 0 : _a.synced_from) === null || _b === void 0 ? void 0 : _b.block_id)\n                    ? block.synced_block.synced_from.block_id\n                    : block.id;\n                // Get children of this block.\n                let child_blocks = await (0, notion_1.getBlockChildren)(this.notionClient, block_id, totalPage);\n                // Push this block to mdBlocks.\n                mdBlocks.push({\n                    type: block.type,\n                    blockId: block.id,\n                    parent: await this.blockToMarkdown(block),\n                    children: [],\n                });\n                // Recursively call blocksToMarkdown to get children of this block.\n                // check for custom transformer before parsing child\n                if (!(block.type in this.customTransformers) &&\n                    !this.customTransformers[block.type]) {\n                    let l = mdBlocks.length;\n                    await this.blocksToMarkdown(child_blocks, totalPage, mdBlocks[l - 1].children);\n                }\n                continue;\n            }\n            let tmp = await this.blockToMarkdown(block);\n            mdBlocks.push({\n                // @ts-ignore\n                type: block.type,\n                blockId: block.id,\n                parent: tmp,\n                children: [],\n            });\n        }\n        return mdBlocks;\n    }\n    /**\n     * Converts a Notion Block to a Markdown Block\n     * @param {ListBlockChildrenResponseResult} block - single notion block\n     * @returns {string} corresponding markdown string of the passed block\n     */\n    async blockToMarkdown(block) {\n        if (typeof block !== \"object\" || !(\"type\" in block))\n            return \"\";\n        let parsedData = \"\";\n        const { type } = block;\n        if (type in this.customTransformers && !!this.customTransformers[type]) {\n            const customTransformerValue = await this.customTransformers[type](block);\n            if (typeof customTransformerValue === \"string\")\n                return customTransformerValue;\n        }\n        switch (type) {\n            case \"image\":\n                {\n                    let blockContent = block.image;\n                    let image_title = \"image\";\n                    const image_caption_plain = blockContent.caption\n                        .map((item) => item.plain_text)\n                        .join(\"\");\n                    const image_type = blockContent.type;\n                    let link = \"\";\n                    if (image_type === \"external\") {\n                        link = blockContent.external.url;\n                    }\n                    if (image_type === \"file\") {\n                        link = blockContent.file.url;\n                    }\n                    // image caption with high priority\n                    if (image_caption_plain.trim().length > 0) {\n                        image_title = image_caption_plain;\n                    }\n                    else if (image_type === \"file\" || image_type === \"external\") {\n                        const matches = link.match(/[^\\/\\\\&\\?]+\\.\\w{3,4}(?=([\\?&].*$|$))/);\n                        image_title = matches ? matches[0] : image_title;\n                    }\n                    return await md.image(image_title, link, this.config.convertImagesToBase64);\n                }\n                break;\n            case \"divider\": {\n                return md.divider();\n            }\n            case \"equation\": {\n                return md.equation(block.equation.expression);\n            }\n            case \"video\":\n            case \"file\":\n            case \"pdf\":\n                {\n                    let blockContent;\n                    let title = type;\n                    if (type === \"video\")\n                        blockContent = block.video;\n                    if (type === \"file\")\n                        blockContent = block.file;\n                    if (type === \"pdf\")\n                        blockContent = block.pdf;\n                    const caption = blockContent === null || blockContent === void 0 ? void 0 : blockContent.caption.map((item) => item.plain_text).join(\"\");\n                    if (blockContent) {\n                        const file_type = blockContent.type;\n                        let link = \"\";\n                        if (file_type === \"external\")\n                            link = blockContent.external.url;\n                        if (file_type === \"file\")\n                            link = blockContent.file.url;\n                        if (caption && caption.trim().length > 0) {\n                            title = caption;\n                        }\n                        else if (link) {\n                            const matches = link.match(/[^\\/\\\\&\\?]+\\.\\w{3,4}(?=([\\?&].*$|$))/);\n                            title = matches ? matches[0] : type;\n                        }\n                        return md.link(title, link);\n                    }\n                }\n                break;\n            case \"bookmark\":\n            case \"embed\":\n            case \"link_preview\":\n            case \"link_to_page\":\n                {\n                    let blockContent;\n                    let title = type;\n                    if (type === \"bookmark\")\n                        blockContent = block.bookmark;\n                    if (type === \"embed\")\n                        blockContent = block.embed;\n                    if (type === \"link_preview\")\n                        blockContent = block.link_preview;\n                    if (type === \"link_to_page\" &&\n                        block.link_to_page.type === \"page_id\") {\n                        blockContent = { url: block.link_to_page.page_id };\n                    }\n                    if (blockContent)\n                        return md.link(title, blockContent.url);\n                }\n                break;\n            case \"child_page\":\n                {\n                    if (!this.config.parseChildPages)\n                        return \"\";\n                    let pageTitle = block.child_page.title;\n                    if (this.config.separateChildPage) {\n                        return pageTitle;\n                    }\n                    return md.heading2(pageTitle);\n                }\n                break;\n            case \"child_database\":\n                {\n                    let pageTitle = block.child_database.title || `child_database`;\n                    return pageTitle;\n                }\n                break;\n            case \"table\": {\n                const { id, has_children } = block;\n                let tableArr = [];\n                if (has_children) {\n                    const tableRows = await (0, notion_1.getBlockChildren)(this.notionClient, id, 100);\n                    let rowsPromise = tableRows === null || tableRows === void 0 ? void 0 : tableRows.map(async (row) => {\n                        const { type } = row;\n                        const cells = row[type][\"cells\"];\n                        /**\n                         * this is more like a hack since matching the type text was\n                         * difficult. So converting each cell to paragraph type to\n                         * reuse the blockToMarkdown function\n                         */\n                        let cellStringPromise = cells.map(async (cell) => await this.blockToMarkdown({\n                            type: \"paragraph\",\n                            paragraph: { rich_text: cell },\n                        }));\n                        const cellStringArr = await Promise.all(cellStringPromise);\n                        tableArr.push(cellStringArr);\n                    });\n                    await Promise.all(rowsPromise || []);\n                }\n                return md.table(tableArr);\n            }\n            // Rest of the types\n            // \"paragraph\"\n            // \"heading_1\"\n            // \"heading_2\"\n            // \"heading_3\"\n            // \"bulleted_list_item\"\n            // \"numbered_list_item\"\n            // \"quote\"\n            // \"to_do\"\n            // \"template\"\n            // \"synced_block\"\n            // \"child_page\"\n            // \"child_database\"\n            // \"code\"\n            // \"callout\"\n            // \"breadcrumb\"\n            // \"table_of_contents\"\n            // \"link_to_page\"\n            // \"audio\"\n            // \"unsupported\"\n            default: {\n                // In this case typescript is not able to index the types properly, hence ignoring the error\n                // @ts-ignore\n                let blockContent = block[type].text || block[type].rich_text || [];\n                blockContent.map((content) => {\n                    if (content.type === \"equation\") {\n                        parsedData += md.inlineEquation(content.equation.expression);\n                        return;\n                    }\n                    const annotations = content.annotations;\n                    let plain_text = content.plain_text;\n                    plain_text = this.annotatePlainText(plain_text, annotations);\n                    if (content[\"href\"])\n                        plain_text = md.link(plain_text, content[\"href\"]);\n                    parsedData += plain_text;\n                });\n            }\n        }\n        switch (type) {\n            case \"code\":\n                {\n                    parsedData = md.codeBlock(parsedData, block[type].language);\n                }\n                break;\n            case \"heading_1\":\n                {\n                    parsedData = md.heading1(parsedData);\n                }\n                break;\n            case \"heading_2\":\n                {\n                    parsedData = md.heading2(parsedData);\n                }\n                break;\n            case \"heading_3\":\n                {\n                    parsedData = md.heading3(parsedData);\n                }\n                break;\n            case \"quote\":\n                {\n                    parsedData = md.quote(parsedData);\n                }\n                break;\n            case \"callout\":\n                {\n                    const { id, has_children } = block;\n                    let callout_string = \"\";\n                    if (!has_children) {\n                        return md.callout(parsedData, block[type].icon);\n                    }\n                    const callout_children_object = await (0, notion_1.getBlockChildren)(this.notionClient, id, 100);\n                    // // parse children blocks to md object\n                    const callout_children = await this.blocksToMarkdown(callout_children_object);\n                    callout_string += `${parsedData}\\n`;\n                    callout_children.map((child) => {\n                        callout_string += `${child.parent}\\n\\n`;\n                    });\n                    parsedData = md.callout(callout_string.trim(), block[type].icon);\n                }\n                break;\n            case \"bulleted_list_item\":\n                {\n                    parsedData = md.bullet(parsedData);\n                }\n                break;\n            case \"numbered_list_item\":\n                {\n                    parsedData = md.bullet(parsedData, block.numbered_list_item.number);\n                }\n                break;\n            case \"to_do\":\n                {\n                    parsedData = md.todo(parsedData, block.to_do.checked);\n                }\n                break;\n        }\n        return parsedData;\n    }\n    /**\n     * Annoate text using provided annotations\n     * @param {string} text - String to be annotated\n     * @param {Annotations} annotations - Annotation object of a notion block\n     * @returns {string} - Annotated text\n     */\n    annotatePlainText(text, annotations) {\n        // if text is all spaces, don't annotate\n        if (text.match(/^\\s*$/))\n            return text;\n        const leadingSpaceMatch = text.match(/^(\\s*)/);\n        const trailingSpaceMatch = text.match(/(\\s*)$/);\n        const leading_space = leadingSpaceMatch ? leadingSpaceMatch[0] : \"\";\n        const trailing_space = trailingSpaceMatch ? trailingSpaceMatch[0] : \"\";\n        text = text.trim();\n        if (text !== \"\") {\n            if (annotations.code)\n                text = md.inlineCode(text);\n            if (annotations.bold)\n                text = md.bold(text);\n            if (annotations.italic)\n                text = md.italic(text);\n            if (annotations.strikethrough)\n                text = md.strikethrough(text);\n            if (annotations.underline)\n                text = md.underline(text);\n        }\n        return leading_space + text + trailing_space;\n    }\n}\nexports.NotionToMarkdown = NotionToMarkdown;\n//# sourceMappingURL=notion-to-md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/notion-to-md.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/md.js":
/*!*****************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/md.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.table = exports.toggle = exports.divider = exports.addTabSpace = exports.image = exports.todo = exports.bullet = exports.callout = exports.quote = exports.heading3 = exports.heading2 = exports.heading1 = exports.equation = exports.codeBlock = exports.link = exports.underline = exports.strikethrough = exports.italic = exports.bold = exports.inlineEquation = exports.inlineCode = void 0;\nconst markdown_table_1 = __importDefault(__webpack_require__(/*! markdown-table */ \"(rsc)/./node_modules/markdown-table/index.js\"));\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\"));\nconst inlineCode = (text) => {\n    return `\\`${text}\\``;\n};\nexports.inlineCode = inlineCode;\nconst inlineEquation = (text) => {\n    return `$${text}$`;\n};\nexports.inlineEquation = inlineEquation;\nconst bold = (text) => {\n    return `**${text}**`;\n};\nexports.bold = bold;\nconst italic = (text) => {\n    return `_${text}_`;\n};\nexports.italic = italic;\nconst strikethrough = (text) => {\n    return `~~${text}~~`;\n};\nexports.strikethrough = strikethrough;\nconst underline = (text) => {\n    return `<u>${text}</u>`;\n};\nexports.underline = underline;\nconst link = (text, href) => {\n    return `[${text}](${href})`;\n};\nexports.link = link;\nconst codeBlock = (text, language) => {\n    if (language === \"plain text\")\n        language = \"text\";\n    return `\\`\\`\\`${language}\n${text}\n\\`\\`\\``;\n};\nexports.codeBlock = codeBlock;\nconst equation = (text) => {\n    return `$$\n${text}\n$$`;\n};\nexports.equation = equation;\nconst heading1 = (text) => {\n    return `# ${text}`;\n};\nexports.heading1 = heading1;\nconst heading2 = (text) => {\n    return `## ${text}`;\n};\nexports.heading2 = heading2;\nconst heading3 = (text) => {\n    return `### ${text}`;\n};\nexports.heading3 = heading3;\nconst quote = (text) => {\n    // the replace is done to handle multiple lines\n    return `> ${text.replace(/\\n/g, \"  \\n> \")}`;\n};\nexports.quote = quote;\nconst callout = (text, icon) => {\n    let emoji;\n    if ((icon === null || icon === void 0 ? void 0 : icon.type) === \"emoji\") {\n        emoji = icon.emoji;\n    }\n    // the replace is done to handle multiple lines\n    return `> ${emoji ? emoji + \" \" : \"\"}${text.replace(/\\n/g, \"  \\n> \")}`;\n};\nexports.callout = callout;\nconst bullet = (text, count) => {\n    let renderText = text.trim();\n    return count ? `${count}. ${renderText}` : `- ${renderText}`;\n};\nexports.bullet = bullet;\nconst todo = (text, checked) => {\n    return checked ? `- [x] ${text}` : `- [ ] ${text}`;\n};\nexports.todo = todo;\nconst image = async (alt, href, convertToBase64 = false) => {\n    // In case the user does not want to convert the images to Base64\n    // or the image is already base64\n    if (!convertToBase64 || href.startsWith(\"data:\")) {\n        if (href.startsWith(\"data:\")) {\n            // Extract base64 data, i.e. the string after 'data:mime/type;base64,'\n            const base64 = href.split(\",\").pop();\n            // This overrides incorrect data: string format to png\n            // so that browsers can correctly render the data\n            return `![${alt}](data:image/png;base64,${base64})`;\n        }\n        return `![${alt}](${href})`;\n    }\n    else {\n        // Otherwise, download the image and convert it to base64\n        const res = await (0, node_fetch_1.default)(href);\n        const buf = await res.arrayBuffer();\n        const base64 = Buffer.from(buf).toString(\"base64\");\n        return `![${alt}](data:image/png;base64,${base64})`;\n    }\n};\nexports.image = image;\nconst addTabSpace = (text, n = 0) => {\n    const tab = \"\t\";\n    for (let i = 0; i < n; i++) {\n        if (text.includes(\"\\n\")) {\n            const multiLineText = text.split(/(?:^|\\n)/).join(`\\n${tab}`);\n            text = tab + multiLineText;\n        }\n        else\n            text = tab + text;\n    }\n    return text;\n};\nexports.addTabSpace = addTabSpace;\nconst divider = () => {\n    return \"---\";\n};\nexports.divider = divider;\nconst toggle = (summary, children) => {\n    if (!summary)\n        return children || \"\";\n    return `<details>\n<summary>${summary}</summary>\n${children || \"\"}\n</details>\\n\\n`;\n};\nexports.toggle = toggle;\nconst table = (cells) => {\n    return (0, markdown_table_1.default)(cells);\n};\nexports.table = table;\n//# sourceMappingURL=md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/md.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/notion.js":
/*!*********************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/notion.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.modifyNumberedListObject = exports.getBlockChildren = void 0;\nconst getBlockChildren = async (notionClient, block_id, totalPage) => {\n    let result = [];\n    let pageCount = 0;\n    let start_cursor = undefined;\n    do {\n        const response = (await notionClient.blocks.children.list({\n            start_cursor: start_cursor,\n            block_id: block_id,\n        }));\n        result.push(...response.results);\n        start_cursor = response === null || response === void 0 ? void 0 : response.next_cursor;\n        pageCount += 1;\n    } while (start_cursor != null &&\n        (totalPage == null || pageCount < totalPage));\n    (0, exports.modifyNumberedListObject)(result);\n    return result;\n};\nexports.getBlockChildren = getBlockChildren;\nconst modifyNumberedListObject = (blocks) => {\n    let numberedListIndex = 0;\n    for (const block of blocks) {\n        if (\"type\" in block && block.type === \"numbered_list_item\") {\n            // add numbers\n            // @ts-ignore\n            block.numbered_list_item.number = ++numberedListIndex;\n        }\n        else {\n            numberedListIndex = 0;\n        }\n    }\n};\nexports.modifyNumberedListObject = modifyNumberedListObject;\n//# sourceMappingURL=notion.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL25vdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0MsR0FBRyx3QkFBd0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL25vdGlvbi5qcz85MmRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tb2RpZnlOdW1iZXJlZExpc3RPYmplY3QgPSBleHBvcnRzLmdldEJsb2NrQ2hpbGRyZW4gPSB2b2lkIDA7XG5jb25zdCBnZXRCbG9ja0NoaWxkcmVuID0gYXN5bmMgKG5vdGlvbkNsaWVudCwgYmxvY2tfaWQsIHRvdGFsUGFnZSkgPT4ge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBsZXQgcGFnZUNvdW50ID0gMDtcbiAgICBsZXQgc3RhcnRfY3Vyc29yID0gdW5kZWZpbmVkO1xuICAgIGRvIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSAoYXdhaXQgbm90aW9uQ2xpZW50LmJsb2Nrcy5jaGlsZHJlbi5saXN0KHtcbiAgICAgICAgICAgIHN0YXJ0X2N1cnNvcjogc3RhcnRfY3Vyc29yLFxuICAgICAgICAgICAgYmxvY2tfaWQ6IGJsb2NrX2lkLFxuICAgICAgICB9KSk7XG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLnJlc3BvbnNlLnJlc3VsdHMpO1xuICAgICAgICBzdGFydF9jdXJzb3IgPSByZXNwb25zZSA9PT0gbnVsbCB8fCByZXNwb25zZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzcG9uc2UubmV4dF9jdXJzb3I7XG4gICAgICAgIHBhZ2VDb3VudCArPSAxO1xuICAgIH0gd2hpbGUgKHN0YXJ0X2N1cnNvciAhPSBudWxsICYmXG4gICAgICAgICh0b3RhbFBhZ2UgPT0gbnVsbCB8fCBwYWdlQ291bnQgPCB0b3RhbFBhZ2UpKTtcbiAgICAoMCwgZXhwb3J0cy5tb2RpZnlOdW1iZXJlZExpc3RPYmplY3QpKHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnRzLmdldEJsb2NrQ2hpbGRyZW4gPSBnZXRCbG9ja0NoaWxkcmVuO1xuY29uc3QgbW9kaWZ5TnVtYmVyZWRMaXN0T2JqZWN0ID0gKGJsb2NrcykgPT4ge1xuICAgIGxldCBudW1iZXJlZExpc3RJbmRleCA9IDA7XG4gICAgZm9yIChjb25zdCBibG9jayBvZiBibG9ja3MpIHtcbiAgICAgICAgaWYgKFwidHlwZVwiIGluIGJsb2NrICYmIGJsb2NrLnR5cGUgPT09IFwibnVtYmVyZWRfbGlzdF9pdGVtXCIpIHtcbiAgICAgICAgICAgIC8vIGFkZCBudW1iZXJzXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBibG9jay5udW1iZXJlZF9saXN0X2l0ZW0ubnVtYmVyID0gKytudW1iZXJlZExpc3RJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG51bWJlcmVkTGlzdEluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5leHBvcnRzLm1vZGlmeU51bWJlcmVkTGlzdE9iamVjdCA9IG1vZGlmeU51bWJlcmVkTGlzdE9iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/notion.js\n");

/***/ })

};
;